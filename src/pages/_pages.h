// DO NOT EDIT THIS FILE
// Generated by tools/gen-pages.py

#pragma once

#include "_dictionary.h"

const char* pages[] =
{
    // Generated from actions.html
    R"=====(
<!doctype html>
<html>
  <head>
    <meta charset="UTF-8">
    <style>
    * {box-sizing: border-box;}
    body {font-size:150%;text-align:center;background: linear-gradient(#003,#77b5fe,#003);background-attachment:fixed;color:white;}
    h2{text-align:center;color:white;}
    a:link {color:#aaf;text-decoration: none;}
    a:visited {color:#ccf;text-decoration: none;}
    .onglets{margin-top:4px;left:0px;font-size:130%;}
    .Baccueil,.Bbrut,.Bparametres,.Bactions{margin-left:20px;border:outset 4px grey;background-color:#333;border-radius:6px;padding-left:20px;padding-right:20px;display:inline-block;}
    .Bactions{border:inset 8px azure;}
    .cadre {width:100%;max-width:1200px;margin:auto;}
    .form {width:100%;text-align:left;}
    .titre{display:flex;justify-content:center;cursor:pointer;}
    .slideTriac{width:100%;position:relative;margin:4px;padding:4px;border:2px inset grey;background-color:#fff8f8;color:black;font-size:14px;}
    .slideTriacIn{display:flex;justify-content:center;width:100%;}
    .planning{width:100%;position:relative;margin:4px;padding:4px;border:2px inset grey;background-color:#fff8f8;color:black;}
    .periode{position:absolute;height:100%;border:outset 4px;border-radius:10px;display:flex;justify-content:space-between;align-items: center;color:white;cursor:ew-resize;}
    .curseur{position:relative;width:100%;height:30px;}
    .infoAction{position:relative;width:100%;height:40px;font-size:20px;}
    .infoZone{position:absolute;height:100%;display:flex;justify-content: space-around;border:2px inset;align-items: center;text-align:center;background-color:#aaa;cursor:pointer;}
    .infoZ{position:absolute;bottom:2px;left:2px;display:none;border:2px inset grey;background-color:#ddd;}
    .infoZ input{width:70px;}
    .Hfin{position:absolute;bottom:2px;right:2px;}
    .zNo{background-color:#666;margin:4px;}
    .zOff{background-color:#66f;margin:4px;}
    .zOn{background-color:#f66;margin:4px;}
    .zPw{background-color:#6f6;margin:4px;padding:2px;}
    .bInset{border:8px inset #f00;}
    .bOutset{border:4px outset grey;cursor:pointer;}
    .zTriac{background-color:#cc4;margin:4px;padding:2px;}
    .selectZ{background-color:#aaa;height:20px;font-size:16px;font-weight: bold;}
    .closeZ{background-color:black;border:outset 2px grey;color:white;position:absolute;top:0px;height:20px;width:20px;right:0px;cursor:pointer;}
    .fcontainer{display: flex;  justify-content: center;background-color:#eea;border:solid 3px #772;margin:6px;}
    .tm{width:100px;text-align:center;padding-left:10px;padding-right:10px;}
    .tbut{width:40px;padding-left:10px;padding-right:10px;text-align:center;font-weight:bold;font-size:24px;cursor:pointer;display:inline-flex;}
    .ligne {display: table-row;padding:10px;}
    .tableAct{width:100%;}
    tr {margin: 2px;text-align:left;font-size:20px;}
    h4{padding:2px;margin:0px;}
    h5{text-align:left;padding:2px;margin:0px;}
    label{text-align:right;}
    input {margin: 5px;text-align:left;font-size:15px;max-width:150px;}
    #message{position:fixed;border:inset 4px grey;top:2px;right:2px;background-color:#333;color:white;font-size:16px;display:none;text-align:left;padding:5px;}
    .pied{display:flex;justify-content:space-between;font-size:14px;color:white;}
    .bord1px{border:solid 1px grey; margin:2px;}
    #mode,.bouton_curseur{display:flex;justify-content: space-around;font-size:20px;}
    .boutons{display:inline-flex;}
    .triacNone0{display:none;}
  </style>
  <script src="ActionsJS"></script>
  <script src="/ParaRouteurJS"></script>
  </head>
  <body onLoad="Init();" onmouseup='mouseClick=false;' >
    <div class="cadre">
      <div class='onglets'><div class='Baccueil'><a href='/'>Accueil</a></div><div class='Bbrut'><a href='/Brute'>Donn&eacute;es brutes</a></div><div class='Bparametres'><a href='/Para'>Param&egrave;tres</a></div><div class='Bactions'><a href='/Actions'>Actions</a></div></div>
      <h2 id='nom_R'>Routeur Solaire - RMS</h2><h4>Planning des Routages <small>(suivant <span id='nomSondeMobile'>sonde Maison</span>)</small></h4>
      <h5 id="TitrTriac" >Routage via Triac</h5>
      <div class="form"   >
        <div id="planning0" class="planning" ></div>
        
        
      </div>
      <h5>Routage via Relais</h5>
      <div class="form"   >
        <div id="plannings"></div>
      </div> 
      <div  style='text-align:right;padding-top:20px;'>
        <input type='button' value='Sauvegarder' onclick="SendValues();">
      </div>
    </div>
    <div id="message"></div><br>
    <div class='pied'><div>Routeur Version : <span id='version'></span></div><div><a href='https:F1ATB.fr' >F1ATB.fr</a></div></div> 
  </body>
</html>
)=====",
    // Generated from actions.js
    R"=====(

var LesActions = [];
var mouseClick = false;
var blockEvent = false;
var temperatureDS=-127;
var LTARFbin=0;
var ITmode=0;
function Init() {
    LoadActions();
    DispTimer();
    LoadParaRouteur();
}
function creerAction(aActif, aTitre, aHost, aPort, aOrdreOn, aOrdreOff, aRepet,aTempo,aReactivite, aPeriodes) {
    var S = {
        Actif: aActif,
        Titre: aTitre,
        Host: aHost,
        Port: aPort,
        OrdreOn: aOrdreOn,
        OrdreOff: aOrdreOff,
        Repet: aRepet,
        Tempo: aTempo,
        Reactivite: aReactivite,
        Periodes: aPeriodes     
    }
    return S;
}
function TracePlanning(iAct) {
    var Radio0 = "<div ><input type='radio' name='modeactif" + iAct +"' id='radio" + iAct +"-0' onclick='checkDisabled();'>Inactif</div>";
    var Radio1 = "<div ><input type='radio' name='modeactif" + iAct +"' id='radio" + iAct +"-1'  onclick='checkDisabled();'>Découpe sinus</div>";
    if (iAct > 0){Radio1 = "<div ><input type='radio' name='modeactif" + iAct +"' id='radio" + iAct +"-1'  onclick='checkDisabled();'>On/Off</div>";}
    Radio1 += "<div ><input type='radio' name='modeactif" + iAct +"' id='radio" + iAct +"-2'  onclick='checkDisabled();'>Multi-sinus</div>";
    Radio1 += "<div ><input type='radio' name='modeactif" + iAct +"' id='radio" + iAct +"-3'  onclick='checkDisabled();'>Train de sinus</div>";

    var S = "<div class='titre'><h4 id ='titre" + iAct + "' onmousemove='Disp(this)' onclick='editTitre(" + iAct + ")'>Titre</h4></div>";
    S +="<div  id='mode' onmousemove='Disp(this)'>" +Radio0 + Radio1 + "</div>";

    S +="<div id='blocPlanning"+iAct+"' class='triacNone0' >";
      S += "<table class='tableAct triacNone"+ iAct +"'><tr>";       
      S += "<td id='Host" + iAct + "'>Host<small> (si externe)</small></td><td class='w15'><input type='text' id='host" + iAct + "' onmousemove='Disp(this)' onchange='checkDisabled();' ></td>";
      S += "<td>Ordre On</td><td class='w15'><input type='text' id='ordreOn" + iAct + "' onmousemove='Disp(this)'></td><td class='tm' id='Repet" + iAct + "'>Répétition(s)</td>";
      S += "<td class='tm' id='Tempo" + iAct + "'>Temporisation(s)</td>";
      S += "</tr><tr id='ligne_bas"  +iAct + "'>";
      S += "<td id='Port" + iAct + "'>Port</td><td class='w15'><input type='number' id='port" + iAct + "' onmousemove='Disp(this)'></td>";
      S += "<td id='ordreoff" + iAct +"'>Ordre Off</td><td class='w15'><input type='text' id='ordreOff" + iAct + "' onmousemove='Disp(this)'></td>";
      S += "<td class='tm'><input type='number' id='repet" + iAct + "' class='tm' onmousemove='Disp(this)'></td>";
      S += "<td class='tm'><input type='number' id='tempo" + iAct + "' class='tm' onmousemove='Disp(this)'></td>";
      S += "</tr></table>";

      S +="<div  class='bouton_curseur' ><div class='boutons'><input id='adds' type='button' value='-' class='tbut'  onclick='AddSub(-1," + iAct + ")' onmousemove='Disp(this)' >";
      S +="<input id='adds' type='button' value='+' class='tbut' onclick='AddSub(1," + iAct + ")' onmousemove='Disp(this)'></div>";
      S +="<div class='slideTriac' id='fen_slide" + iAct +"'><div class='slideTriacIn'>";
            S +="<div>R&eacute;activit&eacute; lente ou charge importante</div>";
            S +="<input type='range' min='1' max='100' value='50' id='slider" + iAct + "' style='width:30%;' oninput=\"GH('sensi" + iAct +"',Math.floor(this.value));\" onmousemove='Disp(this)' >";
            S +="<div>R&eacute;activit&eacute; rapide ou charge faible</div><br>";
      S +="</div><div class='slideTriacIn'><strong><div id='sensi" + iAct + "'></div></strong></div>";
      S +="</div></div>";
      S += "<div id='infoAction" + iAct + "' class='infoAction'></div>";
      S += "<div id='curseurs" + iAct + "' class='curseur'  onmousedown='mouseClick=true;'  onmousemove='mouseMove(this,event," + iAct + ");'  ontouchstart='touchMove(this,event," + iAct + ");'  ontouchmove='touchMove(this,event," + iAct + ");' ></div>";
    S += "</div>";

    GH("planning" + iAct, S);
    GID("radio" + iAct +"-" +LesActions[iAct].Actif).checked = true;
    GH("titre" + iAct, LesActions[iAct].Titre);
    GV("host" + iAct, LesActions[iAct].Host);
    GV("port" + iAct, LesActions[iAct].Port);
    GV("ordreOn" + iAct, LesActions[iAct].OrdreOn);
    GV("ordreOff" + iAct, LesActions[iAct].OrdreOff);
    GV("repet" + iAct, LesActions[iAct].Repet);
    GV("tempo" + iAct, LesActions[iAct].Tempo);
    GV("sensi" + iAct, LesActions[iAct].Reactivite);
    TracePeriodes(iAct);
    
}
function TracePeriodes(iAct) {
    var S = "";
    var Sinfo = "";
    var left = 0;
    var H0 = 0;
    var colors = ["#666", "#66f", "#f66", "#6f6", "#cc4"]; //NO,OFF,ON,PW,Triac
    blockEvent = false;
    for (var i = 0; i < LesActions[iAct].Periodes.length; i++) {
      var w = (LesActions[iAct].Periodes[i].Hfin - H0) /24;
      left = H0 / 24;
      H0 = LesActions[iAct].Periodes[i].Hfin;
      var Type = LesActions[iAct].Periodes[i].Type;
      var color = colors[Type];
      var temperature="";
      if (temperatureDS>-100) { // La sonde de température fonctionne          
        var Tsup=LesActions[iAct].Periodes[i].Tsup;
        if (Tsup>=0 && Tsup <=100) temperature +="<div> <small> si </small> T &ge;"+Tsup+"°</div>";
        var Tinf=LesActions[iAct].Periodes[i].Tinf;
        if (Tinf>=0 && Tinf <=100) temperature +="<div> <small> si </small> T &le;"+Tinf+"°</div>";
      }  
      var TxtTarif= "";
      if (LTARFbin>0)  {   
        TxtTarif= " <small> si </small>Tarif : ";
        var Tarif_=LesActions[iAct].Periodes[i].Tarif;
        if (LTARFbin<=3) {
          TxtTarif += (Tarif_ & 1) ? "<span style='color:red;'>H. Pleine</span>":"" ; 
          TxtTarif += (Tarif_ & 2) ? "<span style='color:green;'> H. Creuse</span>":"" ; 
        } else {
          TxtTarif += (Tarif_ & 4) ? "Tempo<span style='color:blue;'>Bleu</span>":"" ; 
          TxtTarif += (Tarif_ & 8) ? "<span style='color:white;'> Blanc</span>":"" ; 
          TxtTarif += (Tarif_ & 16) ? "<span style='color:red;'> Rouge</span>":"" ; 
        }
        TxtTarif ="<div>" + TxtTarif +"</div>";
      }
      if (LesActions[iAct].Actif<=1 && iAct>0){
        LesActions[iAct].Periodes[i].Vmax=Math.max(LesActions[iAct].Periodes[i].Vmin,LesActions[iAct].Periodes[i].Vmax);
        var TexteMinMax="<div>Off si Pw&gt;"+LesActions[iAct].Periodes[i].Vmax+"W</div><div>On si Pw&lt;"+LesActions[iAct].Periodes[i].Vmin+"W</div>"+temperature + TxtTarif;
      } else {
        LesActions[iAct].Periodes[i].Vmax=Math.max(0,LesActions[iAct].Periodes[i].Vmax);
        LesActions[iAct].Periodes[i].Vmax=Math.min(100,LesActions[iAct].Periodes[i].Vmax);
        var TexteMinMax="<div>Seuil Pw : "+LesActions[iAct].Periodes[i].Vmin+"W</div>"+ temperature + "<div>Ouvre Max : "+LesActions[iAct].Periodes[i].Vmax+"%</div>" + TxtTarif;
      }
      var TexteTriac="<div>Seuil Pw : "+LesActions[iAct].Periodes[i].Vmin+"W</div>"+temperature + "<div>Ouvre Max : "+LesActions[iAct].Periodes[i].Vmax+"%</div>"+TxtTarif;
      var paras = ["Pas de contr&ocirc;le", "OFF", "ON" + temperature + TxtTarif, TexteMinMax, TexteTriac];
      var para = paras[Type];
      S += "<div class='periode' style='width:" + w + "%;left:" + left + "%;background-color:" + color + ";'   ><div>&lArr;</div><div>&rArr;</div></div>";
      Hmn = Math.floor(H0 / 100) + ":" + ("0" + Math.floor(0.6 * (H0 - 100 * Math.floor(H0 / 100)))).substr(-2, 2);
      fs = Math.max(8, Math.min(16, w/2)) + "px";
      Sinfo += "<div class='infoZone' style='width:" + w + "%;left:" + left + "%;border-color:" + color + ";font-size:" + fs + "'  onclick='infoZclicK(" + i + "," + iAct + ")'  >"
      Sinfo += "<div class='Hfin'>" + Hmn + "</div><div id='info" + iAct + "Z" + i + "' class='infoZ' ></div>" + para + "</div>";
    }
    GH("curseurs" + iAct, S);
    GH("infoAction" + iAct, Sinfo);
}
function touchMove(t, ev, iAct) {
    var leftPos = ev.touches[0].clientX - GID(t.id).getBoundingClientRect().left;
    NewPosition(t, leftPos, iAct);
}
function mouseMove(t, ev, iAct) {
    if (mouseClick) {
        var leftPos = ev.clientX - GID(t.id).getBoundingClientRect().left;
        NewPosition(t, leftPos, iAct);
    }
}
function NewPosition(t, leftPos, iAct) {
    var G = GID(t.id).style.left;
    //+ window.scrollX;
    var width = GID(t.id).getBoundingClientRect().width;
    var HeureMouse = leftPos * 2420 / width;
    var idxClick = 0;
    var deltaX = 999999;
    for (var i = 0; i < LesActions[iAct].Periodes.length - 1; i++) {
        var dist = Math.abs(HeureMouse - LesActions[iAct].Periodes[i].Hfin)
            if (dist < deltaX) {
                idxClick = i;
                deltaX = dist;
            }
    }
    var NewHfin = Math.max(0, Math.min(HeureMouse, 2400));
    if (idxClick == LesActions[iAct].Periodes.length - 1) NewHfin=2400;
    if (idxClick < LesActions[iAct].Periodes.length - 1)
        NewHfin = Math.min(NewHfin, LesActions[iAct].Periodes[idxClick + 1].Hfin);
    if (idxClick > 0)
        NewHfin = Math.max(NewHfin, LesActions[iAct].Periodes[idxClick - 1].Hfin);
    LesActions[iAct].Periodes[idxClick].Hfin = Math.floor(NewHfin);
    TracePeriodes(iAct);

}
function AddSub(v, iAct) {
    if (v == 1) {
        if (LesActions[iAct].Periodes.length<8){
          LesActions[iAct].Periodes.push({
              Hfin: 2400,
              Type: 1,
              Vmin:0,
              Vmax:100,
              Tinf:150,
              Tsup:150,
              Tarif:31
          }); //Tarif codé en bits
          var Hbas = 0;
          if (LesActions[iAct].Periodes.length > 2){
              Hbas = parseInt(LesActions[iAct].Periodes[LesActions[iAct].Periodes.length - 3].Hfin); 
          }      
          if (LesActions[iAct].Periodes.length > 1) {
              LesActions[iAct].Periodes[LesActions[iAct].Periodes.length - 2].Hfin = Math.floor((Hbas + 2400) / 2);              
          }               
        }
    } else {
      if (LesActions[iAct].Periodes.length>1){
        LesActions[iAct].Periodes.pop();
        if (LesActions[iAct].Periodes.length > 0)
            LesActions[iAct].Periodes[LesActions[iAct].Periodes.length - 1].Hfin = 2400;
      }
    }
    TracePeriodes(iAct);
    
}
function infoZclicK(i, iAct) {
    if (!blockEvent) {
        blockEvent = true;
        var Type = LesActions[iAct].Periodes[i].Type;
        var idZ = "info" + iAct + "Z" + i;
        var S = "<div class='selectZ'>S&eacute;lection Action<div class='closeZ' onclick='infoZclose(\"" + idZ + "\")'>X</div></div>";
        //On ne traite plus depuis version8 le cas "Pas de Contrôle". Inutile
        c = (Type == 1) ? "bInset" : "bOutset";
        S += "<div class='zOff " + c + "' onclick='selectZ(1," + i + "," + iAct + ");' onmousemove='Disp(\"zOff\")'>OFF</div>";
        S += "<div class='fcontainer'><div >";
            c = (Type == 2) ? "bInset" : "bOutset";
            S += "<div  class='zOn " + c + "' onclick='selectZ(2," + i + "," + iAct + ");' onmousemove='Disp(\"zOn\")' >ON</div>";
            c = (Type > 2) ? "bInset" : "bOutset";
            var Vmin=LesActions[iAct].Periodes[i].Vmin;
            var Vmax=LesActions[iAct].Periodes[i].Vmax;
            var Tinf=LesActions[iAct].Periodes[i].Tinf;
            var Tsup=LesActions[iAct].Periodes[i].Tsup;
            if (Tinf>100 || Tinf<0) Tinf=""; //Temperature entre 0 et 100
            if (Tsup>100 || Tsup<0) Tsup=""; //Temperature entre 0 et 100
            if (iAct > 0) {
                var Routage=["","Routage ON/Off","Routage Multi-sinus","Routage Train de Sinus"];
                S += "<div class='zPw " + c + "' onclick='selectZ(3," + i + "," + iAct + ");'><div><small>" +Routage[LesActions[iAct].Actif] + "</small></div>";
                if (LesActions[iAct].Actif<=1) {
                    S += "<div><small>On : &nbsp;</small>Pw &lt;<input id='Pw_min_"+idZ+"' onmousemove='Disp(this)' type='number' value='"+Vmin+"' onchange='NewVal(this)' >W</div>";
                    S += "<div><small>Off : </small>Pw &gt;<input id='Pw_max_"+idZ+"' onmousemove='Disp(this)' type='number' value='"+Vmax+"' onchange='NewVal(this)'>W</div>";
                    S += "<div><small>Puissance active en entrée de maison</small></div></div>";
                } else {
                  S += "<div><small>Seuil Pw : &nbsp;</small><input id='Pw_min_"+idZ+"' onmousemove='Disp(this)' type='number' value='"+Vmin+"' onchange='NewVal(this)' >W</div>";
                  S += "<div><small>Puissance active en entrée de maison</small></div>";
                  S += "<div><small>Ouvre Max : </small><input id='Pw_max_"+idZ+"' onmousemove='Disp(this)' type='number' value='"+Vmax+"' onchange='NewVal(this)'>%</div></div>";
                }
                
            } else {
                var Routage=["","Routage Découpe Sinus","Routage Multi-sinus","Routage Train de Sinus"];
                S += "<div  class='zTriac " + c + "' onclick='selectZ(4," + i + "," + iAct + ");'><div><small>" +Routage[LesActions[iAct].Actif] + "</small></div>";
                S += "<div>Seuil Pw &nbsp;<input id='Pw_min_"+idZ+"' onmousemove='Disp(\"pwTr\")' type='number' value='"+Vmin+"' onchange='NewVal(this)'>W</div>";
                S += "<div><small>Puissance active en entrée de maison</small></div>";
                S += "<div>Ouvre Max <input id='Pw_max_"+idZ+"' onmousemove='Disp(\"mxTr\")' type='number' value='"+Vmax+"' onchange='NewVal(this)'>%</div></div>";
            }
          S += "</div>";
          S += "<div>";
            if (temperatureDS>-100) {
              S += "<div  class='bord1px' onmousemove='Disp(\"tmpr\")'>";
              S += "<div>Actif si température :</div>";
              S += "<div>T &ge;<input id='T_sup_"+idZ+"'  type='number' value='"+Tsup+"' onchange='NewVal(this)' >°</div>";
              S += "<div>T &le;<input id='T_inf_"+idZ+"'  type='number' value='"+Tinf+"' onchange='NewVal(this)' >°</div>";
              S += "<div><small>T en degré (0 à 100) ou laisser vide</small></div>";
              S += "</div>";
            }
            if (LTARFbin>0)  { 
              
              S += "<div  class='bord1px' onmousemove='Disp(\"tarif\")'>";
                S += "<div>Actif si tarif :</div>";
                if (LTARFbin<=3) {
                  S += "<div id='PleineCreuse'><span style='color:red;'>Heure Pleine</span><input type='checkbox' checked id='TarifPl_"+idZ+"' onchange='NewVal(this)'> <span style='color:green;'>Heure Creuse</span><input type='checkbox' checked id='TarifCr_"+idZ+"' onchange='NewVal(this)'></div>";
                } else {
                  S += "<div id='Tempo'>Tempo <span style='color:blue;'>Bleu</span><input type='checkbox' checked id='TarifBe_"+idZ+"' onchange='NewVal(this)'><span style='color:white;'> Blanc</span><input type='checkbox' checked id='TarifBa_"+idZ+"' onchange='NewVal(this)'><span style='color:red;'> Rouge</span><input type='checkbox' checked id='TarifRo_"+idZ+"' onchange='NewVal(this)'></div>";
                }

              S += "</div>";
            }
          S += "</div>";
        S += "</div>";
        GH(idZ, S);
        var Tarif_=LesActions[iAct].Periodes[i].Tarif;
        if (LTARFbin>0)  {
          if (LTARFbin<=3) {
            GID("TarifPl_" + idZ).checked = (Tarif_ & 1) ? 1:0 ; // H Pleine
            GID("TarifCr_" + idZ).checked = (Tarif_ & 2) ? 1:0 ;
          } else {
            GID("TarifBe_" + idZ).checked = (Tarif_ & 4) ? 1:0 ;
            GID("TarifBa_" + idZ).checked = (Tarif_ & 8) ? 1:0 ;
            GID("TarifRo_" + idZ).checked = (Tarif_ & 16) ? 1:0 ; //Rouge
          }
        }
        GID(idZ).style.display = "block";
    }
}
function infoZclose(idx) {
    var champs=idx.split("info");
    var idx=champs[1].split("Z");
    S="TracePeriodes("+idx[0]+");"
    setTimeout(S, 100);
}
function selectZ(T, i, iAct) {
    if (LesActions[iAct].Periodes[i].Type != T) {
        LesActions[iAct].Periodes[i].Type = T;
        var idZ = "info" + iAct + "Z" + i;
        if (T <= 2)
            infoZclose(idZ);
        TracePeriodes(iAct);
    }
}
function NewVal(t){
    var champs=t.id.split("info");
    var idx=champs[1].split("Z");   //Num Action, Num période
    if (champs[0].indexOf("min")>0){
      LesActions[idx[0]].Periodes[idx[1]].Vmin=Math.floor(GID(t.id).value);
    }
    if (champs[0].indexOf("max")>0){
      LesActions[idx[0]].Periodes[idx[1]].Vmax=Math.floor(GID(t.id).value);
      if (idx[0]==0){
        LesActions[idx[0]].Periodes[idx[1]].Vmax=Math.max(LesActions[idx[0]].Periodes[idx[1]].Vmax,5);
        LesActions[idx[0]].Periodes[idx[1]].Vmax=Math.min(LesActions[idx[0]].Periodes[idx[1]].Vmax,100);
      }
    }
    if (champs[0].indexOf("inf")>0){
      var V= GID(t.id).value;
      if (V=="") V=128;
      LesActions[idx[0]].Periodes[idx[1]].Tinf=Math.floor(V);
    }
    if (champs[0].indexOf("sup")>0){
      var V= GID(t.id).value;
      if (V=="") V=128;
      LesActions[idx[0]].Periodes[idx[1]].Tsup=Math.floor(V);
    }	
  
    if (champs[0].indexOf("Tarif")>=0){
      var idZ = "info" + champs[1];
      var Tarif_ = 0;
      if (LTARFbin<=3) {
        Tarif_ += GID("TarifPl_" + idZ).checked ? 1:0; //H pleine
        Tarif_ += GID("TarifCr_" + idZ).checked ? 2:0;
        } else {
        Tarif_ += GID("TarifBe_" + idZ).checked ? 4:0; //Bleu
        Tarif_ += GID("TarifBa_" + idZ).checked ? 8:0;
        Tarif_ += GID("TarifRo_" + idZ).checked ? 16:0; //Rouge
      }
      LesActions[idx[0]].Periodes[idx[1]].Tarif=Tarif_;
    }	
}
function editTitre(iAct) {
    if (GID("titre" + iAct).innerHTML.indexOf("<input") == -1) {
        GH("titre" + iAct, "<input type='text' value='" + GID("titre" + iAct).innerHTML + "' id='Etitre" + iAct + "'  onblur='TitreValid(" + iAct + ")' >");
        GID("Etitre" + iAct).focus();
    }
}
function TitreValid(iAct) {
    LesActions[iAct].Titre = GID("Etitre" + iAct).value.trim();
    GH("titre" + iAct, LesActions[iAct].Titre);
}
function checkDisabled(){
  for (var iAct = 0; iAct < LesActions.length; iAct++) {
      for (var i=0;i<=3;i++){
          if( GID("radio" + iAct +"-"+ i).checked ) { LesActions[iAct].Actif =i;}
      }
      TracePeriodes(iAct);
      GID("planning0").style.display = (ITmode>0) ? "block" : "none";  // Pas de Triac si pas de synchro Zc
      GID("TitrTriac").style.display = (ITmode>0) ? "block" : "none";  
      GID("blocPlanning"+iAct).style.display = (LesActions[iAct].Actif>0) ? "block" : "none";
      var visible = ( LesActions[iAct].Actif== 1) ? "visible" : "hidden";
      GID("Host"+iAct).style.visibility =visible;
      GID("host"+iAct).style.visibility =visible;
      GID("Tempo"+iAct).style.visibility =visible;
      GID("tempo"+iAct).style.visibility =visible;
      LesActions[iAct].Host = GID("host" + iAct).value.trim();
      if (LesActions[iAct].Host =="") visible="hidden";
      GID("ordreoff"+iAct).style.visibility =visible;
      GID("ordreOff"+iAct).style.visibility =visible;       
      GID("Port"+iAct).style.visibility =visible;
      GID("port"+iAct).style.visibility =visible;
      GID("Repet"+iAct).style.visibility =visible;
      GID("repet"+iAct).style.visibility =visible;       
      GID("ligne_bas"+iAct).style.display  =( LesActions[iAct].Actif> 1) ?  "none" :"table-row";
      GID("fen_slide"+iAct).style.visibility = (LesActions[iAct].Actif== 1 && iAct>0  ) ? "hidden" : "visible";
  }
}
function LoadActions() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            var LeRetour = this.responseText;
            var Les_ACTIONS = LeRetour.split(GS);
            var LesParas = Les_ACTIONS[0].split(RS);
            temperatureDS=LesParas[0];
            LTARFbin = parseInt(LesParas[1]);
            ITmode = parseInt(LesParas[2]);
            LesActions.splice(0,LesActions.length);
            for (var iAct=1;iAct<Les_ACTIONS.length-1;iAct++){
              var champs=Les_ACTIONS[iAct].split(RS);
              var NbPeriodes=champs[9];
              var Periodes=[];
              var j=10;
              for (var i=0;i<NbPeriodes;i++){
                Periodes[i]={Type:champs[j],Hfin:champs[j+1],Vmin:champs[j+2],Vmax:champs[j+3],Tinf:champs[j+4],Tsup:champs[j+5],Tarif:champs[j+6]};
                j=j+7;
              }
              LesActions[iAct-1]=creerAction(champs[0], champs[1], champs[2], champs[3], champs[4], champs[5], champs[6],champs[7],champs[8], Periodes);
            }    
            if (LesActions.length==0){  //Action Triac
                LesActions.push( creerAction(0, "Titre Triac", "", 50, "", "","", 0,50, [{
                        Hfin: 2400,
                        Type: 4,
                        Vmin:0,
                        Vmax:100,
                        Tinf:150,
                        Tsup:150,
                        Tarif:31
                    }
                ]));
            }
            LesActions.push( creerAction(0, "Titre Relais " + LesActions.length, "", 80, "", "", 240,0,50, [{
                    Hfin: 2400,
                    Type: 3,
                    Vmin:0,
                    Vmax:100,
                    Tinf:150,
                    Tsup:150,
                    Tarif:31
                }
            ]));
            var S = "";
            for (var i = 1; i < LesActions.length; i++) {
                S += "<div id='planning" + i + "' class='planning' ></div>";
            }
            GH("plannings", S);
            for (var iAct = 0; iAct < LesActions.length; iAct++) {
                TracePlanning(iAct);
                GID("radio" + iAct +"-" +LesActions[iAct].Actif).checked = true;
                GH("titre" + iAct,LesActions[iAct].Titre);
                GV("host" + iAct,LesActions[iAct].Host);
                GV("port" + iAct,LesActions[iAct].Port);
                GV("ordreOn" + iAct,LesActions[iAct].OrdreOn);
                GV("ordreOff" + iAct,LesActions[iAct].OrdreOff);
                GV("repet" + iAct,LesActions[iAct].Repet);
                GV("tempo" + iAct,LesActions[iAct].Tempo);
                GV("slider" + iAct ,LesActions[iAct].Reactivite); 
                GH("sensi" + iAct ,LesActions[iAct].Reactivite)
            }
            checkDisabled();
            
        }
    };
    xhttp.open('GET', 'ActionsAjax', true);
    xhttp.send();
}


function SendValues() {
    for (var iAct = 0; iAct < LesActions.length; iAct++) {
      for (var i=0;i<=3;i++){
          if( GID("radio" + iAct +"-"+ i).checked ) { LesActions[iAct].Actif =i;}
      }
      LesActions[iAct].Titre = GID("titre" + iAct).innerHTML.trim();
      LesActions[iAct].Host = GID("host" + iAct).value.trim();
      LesActions[iAct].Port = GID("port" + iAct).value;
      LesActions[iAct].OrdreOn = GID("ordreOn" + iAct).value.trim();
      LesActions[iAct].OrdreOff = GID("ordreOff" + iAct).value.trim();
      LesActions[iAct].Repet = GID("repet" + iAct).value;
      LesActions[iAct].Tempo = GID("tempo" + iAct).value;
      LesActions[iAct].Reactivite = GID("slider" + iAct).value;
      if (LesActions[iAct].OrdreOn=="" && iAct>0) LesActions[iAct].Actif=0;
    }
    var S="";
    for (var iAct = 0; iAct < LesActions.length; iAct++) {
      if ((iAct==0)||LesActions[iAct].Actif>0){
          S +=LesActions[iAct].Actif+RS+LesActions[iAct].Titre+RS;
          S +=LesActions[iAct].Host+RS+LesActions[iAct].Port+RS;
          S +=LesActions[iAct].OrdreOn+RS+LesActions[iAct].OrdreOff+RS+LesActions[iAct].Repet+RS+LesActions[iAct].Tempo+RS;
          S +=LesActions[iAct].Reactivite + RS + LesActions[iAct].Periodes.length+RS;
          for (var i=0;i<LesActions[iAct].Periodes.length;i++){
            S +=LesActions[iAct].Periodes[i].Type+RS+Math.floor(LesActions[iAct].Periodes[i].Hfin)+RS;
            S +=Math.floor(LesActions[iAct].Periodes[i].Vmin)+RS+Math.floor(LesActions[iAct].Periodes[i].Vmax)+RS;  
            S +=Math.floor(LesActions[iAct].Periodes[i].Tinf)+RS+Math.floor(LesActions[iAct].Periodes[i].Tsup)+RS;  
            S +=LesActions[iAct].Periodes[i].Tarif + RS;  
          }
          S +=GS;
      }
    }
    S=clean(S);
    S = "?actions="+S+"|"; //On ne peut pas terminer par GS
    
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            var retour = this.responseText;
            location.reload();
        }
    };
    console.log(S)
    xhttp.open('GET', 'ActionsUpdate' + S, true);
    xhttp.send();
    
}


function Disp(t) {
  if (t!="zNo" && t!="zOn" && t!="zOff" && t!="pwTr" && t!="mxTr"  && t!="tmpr" && t!="tarif" ) t=t.id.substr(0, 4);
    switch (t) { 
    case "mode":
        var m = "D&eacute;sactivation du routage ou mode de découpe du secteur 230V."
            break;
    case "titr":
        var m = "Nom ou Titre";
        break;
    case "slid":
        var m = "Gain de la boucle d'asservissement. Faible, la r&eacute;gulation est lente mais stable. Elev&eacute;, la r&eacute;gulation est rapide mais risque d'oscillations. A ajuster suivant la charge branch&eacute;e au triac.";
        break;
    case "host":
        var m = "Adresse IP machine sur réseau LAN, nom de domaine ou rien pour l'ESP32.<br>Ex : <b>192.168.1.25</b> ou <b>machine.local</b> .";
        break;
    case "port":
        var m = "Port d'acc&egrave;s via le protocole http , uniquement pour machine distante. En g&eacute;n&eacute;ral <b>80</b>.";
        break;
    case "ordr":
        var m = "Page appel&eacute;e avec les param&egrave;tres. <br>";
        m += "Ex. pour un GPIO de l'ESP32  :<br><b>gpio=5&out=1</b> mettre le GPIO 5 &agrave; 1. <br>"
        m += "Ex. pour une machine sur le r&eacute;seau :<br><b>/commande?idx=23&position=on</b>. Se r&eacute;f&eacute;rer &agrave; la documentation constructeur.<br>"
        m += "Ne rien mettre dans les champs Ordre On et (Ordre Off) pour supprimer l'action.<br>"
        break;
    case "repe":
        var m = "P&eacute;riode en s de r&eacute;p&eacute;tition/rafra&icirc;chissement de la commande. Uniquement pour les commandes vers l'extérieur.<br>";
        m += "0= pas de répétition.";
        break;
    case "temp":
        var m = "Temporisation entre chaque changement d'état pour éviter des oscillations quand un appareil dans la maison consomme en dent de scie (Ex: un four)."
        break;
    case "adds":
        var m = "Ajout ou retrait d'une p&eacute;riode horaire."
            break;
    case "Pw":
        var m = "Seuil inf&eacute;rieur  de puissance mesur&eacute;e Pw &lt; pour d&eacute;marrer le routage  et seuil sup&eacute;rieur de puissance  &gt; pour l'arr&ecirc;ter.<br> ";
    m +="Attention, la diff&eacute;rence, seuil sup&eacute;rieur moins  seuil inf&eacute;rieur doit &ecirc;tre sup&eacute;rieure &agrave; la consommation du dipositif pour &eacute;viter l'oscillation du relais de commande."
        break;
    case "pwTr":
        var m = "Seuil en W de r&eacute;gulation par le Triac de la puissance mesur&eacute;e Pw en entrée de la maison. Valeur typique : 0.";
        break;
    case "mxTr":
        var m = "Ouverture maximum du triac entre 5 et 100%. Valeur typique : 100%";
        break;
    case "zNo":
          var m = "Pas d'action On ou Off de routage";
          break;
    case "zOff":
          var m = "Off forcé";
          break;
    case "zOn":
          var m = "On forcé (si règle température valide)";
          break;
    case "tmpr":
          var m = "Définir la ou les températures qui permettent l'activation de la fonction On ou Routage.<br>Sinon ordre Off envoyé ou Triac se ferme.<br>Ne rien mettre si pas d'activation en fonction de la température.";
          break;
    case "tarif":
          var m = "Condition d'activation suivant la tarification.<br>Sinon ordre Off envoyé ou Triac se ferme.";
          break;
    }
    GH("message", m);
    GID("message").style = "display:inline-block;";
    Timer = 10;
}
var Timer = 0;
function DispTimer() {
    Timer = Timer - 1;
    if (Timer < 0) {
        GID('message').style = 'display:none;';
    }
    setTimeout("DispTimer();", 1000);
}
function AdaptationSource(){
  
}
)=====",
    // Generated from brute.html
    R"=====(
<!doctype html>
   <html><head><meta charset="UTF-8"><style>
    * {box-sizing: border-box;}
    body {background: linear-gradient(#003,#77b5fe,#003);background-attachment:fixed;font-size:150%;text-align:center;width:100%;max-width:1000px;margin:auto;}
    h2{text-align:center;color:white;}
    a:link {color:#ccf;text-decoration: none;}
    a:visited {color:#ccf;text-decoration: none;}
    .ri { text-align: right;}
    .Wh { background-color:#fdd;}
    .A { background-color:#ddf;}
    .W { background-color:#f88;}
    .phi { background-color:#ffd;}
    .V { background-color:#ee8;}
    .VA { background-color:#dfd;}
    .Hz,.Enph { background-color:#eeb;}
    .titre{background-color:#ccc; text-align: center;font-weight: bold;}
    .foot { color:white;}
    #date,#dateLinky { color:white;}
    #DataLinky,#dataSmartG,#dataShellyEm {border:10px inset azure; background-color:white;margin:auto;padding:4px;text-align:left;overflow:hidden;display:inline-block;}
    #tableau,#DataESP32,#tableauLinky,#tableauEnphase { background-color:white;display:inline-block;margin:auto;padding:4px;}
    table {border:10px inset azure;}
    td { text-align: left;padding:4px;}
    #LED{position:absolute;top:4px;left:4px;width:0px;height:0px;border:5px solid red;border-radius:5px;}
    .onglets{margin-top:4px;left:0px;font-size:130%;}
    .Baccueil,.Bbrut,.Bparametres,.Bactions{margin-left:20px;border:outset 4px grey;background-color:#333;border-radius:6px;padding-left:20px;padding-right:20px;display:inline-block;}
    .Bbrut{border:inset 8px azure;}
    .pied{display:flex;justify-content:space-between;font-size:14px;color:white;}
    .dispT{display:none;}
    .ce { text-align: center;position:relative;}
    svg { border:10px inset azure;background: linear-gradient(#333,#666,#333);}
    #infoUxIx2,#infoUxI,#infoLinky,#infoEnphase,#infoSmartG,#infoShellyEm{display:none;}
    #donneeDistante{font-size:50%;color:white;text-align:center;margin-bottom:10px;display:none;}
  </style></head>
  <body  onload='LoadParaRouteur();' >
    <div id='LED'></div>
    <div class='onglets'><div class='Baccueil'><a href='/'>Accueil</a></div><div class='Bbrut'><a href='/Brute'>Donn&eacute;es brutes</a></div><div class='Bparametres'><a href='/Para'>Param&egrave;tres</a></div><div class='Bactions'><a href='/Actions'>Actions</a></div></div>
    <h2 id='nom_R'>Routeur Solaire - RMS</h2>
    <div id='date'>Date</div><br><br>
    <div id='infoUxI'>
      <div class='foot' >Tension et Courant sur 20ms</div>
      <div  class='ce'><h3 style='position:absolute;top:20px;right:40px;'><span style='color:red;'>_<span id='Ueff'></span><small> V</small></span>
      <span style='color:lightgreen;'> _<span id='Ieff'></span><small> A</small></span><br>
      <span style='color:white;'> <small>Facteur de puissance : <span id='cosphi'></span></small></span></h3><p id='SVG'></p></div>
    </div>
    <div id='infoUxIx2'>
      <br><br><div class='foot' >Donn&eacute;es brutes capteur JSY-MK-194T</div>
      <div id='tableau'></div>
    </div>
    <div id='infoEnphase'>
      <br><br><div class='foot' >Donn&eacute;es Enphase Envoye-S Metered</div>
      <div id='tableauEnphase'></div>
    </div>
    <div id='infoSmartG'>
      <div class='foot' >Donn&eacute;es SmartGateways</div>
      <div id='dataSmartG'></div>
    </div>
    <div id='infoShellyEm'>
      <div class='foot' >Donn&eacute;es Shelly Em </div>
      <div id='dataShellyEm'></div>
    </div>
    <div id='infoLinky'>
      <div id='dateLinky'></div>
      <div id='tableauLinky'></div>
      <br><br><div class='foot' >Donn&eacute;es brutes Linky en mode standard</div>
      <div><div id='DataLinky' ></div></div>
    </div>
    <div id="donneeDistante">Données distantes</div>
    <div class='foot' >Donn&eacute;es ESP32</div>
    <div><div id='DataESP32' ></div></div><br>
    <div class='pied'><div>Routeur Version : <span id='version'></span></div><div><a href='https:F1ATB.fr' >F1ATB.fr</a></div></div>
    <script src='BruteJS'></script>
    <script src="/ParaRouteurJS"></script>
    <br>
  </body>
</html>

)=====",
    // Generated from brute.js
    R"=====(
var InitFait=false;
var IdxMessage=0;
var MessageLinky='';

const M=[]; //Pour UxIx2
M.push(['Tension_M','Tension efficace','V','V']);
M.push(['Intensite_M','Courant efficace','A','A']);
M.push(['PuissanceS_M','Puissance <small>(Pw)</small>','W','W']);
M.push(['PowerFactor_M','Facteur de puissance','','phi']);
M.push(['Energie_M_Soutiree','Energie active soutirée','Wh','Wh']);
M.push(['Energie_M_Injectee','Energie active injectée','Wh','Wh']);
M.push(['Tension_T','Tension efficace','V','V']);
M.push(['Intensite_T','Courant efficace','A','A']);
M.push(['PuissanceS_T','Puissance <small>(Pw)</small>','W','W']);
M.push(['PowerFactor_T','Facteur de puissance','','phi']);
M.push(['Energie_T_Soutiree','Energie active consommée','Wh','Wh']);
M.push(['Energie_T_Injectee','Energie active produite','Wh','Wh']); 
M.push(['Frequence','Fréquence','Hz','Hz']);
const E=[]; //Pour Enphase
E.push(['Tension_M','Tension efficace','V','V']);
E.push(['Intensite_M','Courant efficace','A','A']);
E.push(['PuissanceS_M','Puissance réseau public <small>(Pw)</small>','W','W']);
E.push(['PowerFactor_M','Facteur de puissance','','phi']);
E.push(['Energie_M_Soutiree','Energie active soutirée','Wh','Wh']);
E.push(['Energie_M_Injectee','Energie active injectée','Wh','Wh']);
E.push(['PactProd','Puissance produite <small>(Pw)</small>','W','W']);
E.push(['PactConso_M','Puissance consommée <small>(Pw)</small>','W','W']);
E.push(['SessionId','Session Id</small>','','Enph']);
E.push(['Token_Enphase','Token','','Enph']);

const L=[];
L.push(['EAST','Energie active soutir&eacute;e',false,'Wh',0]);
L.push(['EASF01','Energie active soutir&eacute;e Fournisseur,<br>index 01',true,'Wh',0]);
L.push(['EASF02','Energie active soutir&eacute;e Fournisseur,<br>index 02',true,'Wh',0]);
L.push(['EASF03','Energie active soutir&eacute;e Fournisseur,<br>index 03',true,'Wh',0]);
L.push(['EASF04','Energie active soutir&eacute;e Fournisseur,<br>index 04',true,'Wh',0]);
L.push(['EASF05','Energie active soutir&eacute;e Fournisseur,<br>index 05',true,'Wh',0]);
L.push(['EASF06','Energie active soutir&eacute;e Fournisseur,<br>index 06',true,'Wh',0]);
L.push(['EASF07','Energie active soutir&eacute;e Fournisseur,<br>index 07',true,'Wh',0]);
L.push(['EASF08','Energie active soutir&eacute;e Fournisseur,<br>index 08',true,'Wh',0]);
L.push(['EASF09','Energie active soutir&eacute;e Fournisseur,<br>index 09',true,'Wh',0]);
L.push(['EASF10','Energie active soutir&eacute;e Fournisseur,<br>index 10',true,'Wh',0]);
L.push(['EAIT','Energie active inject&eacute;e',false,'Wh',0]);
L.push(['IRMS1','Courant efficace, phase 1',true,'A',0]);
L.push(['IRMS2','Courant efficace, phase 2',true,'A',0]);
L.push(['IRMS3','Courant efficace, phase 3',true,'A',0]);
L.push(['URMS1','Tension efficace, phase 1',true,'V',0]);
L.push(['URMS2','Tension efficace, phase 2',true,'V',0]);
L.push(['URMS3','Tension efficace, phase 3',true,'V',0]);
L.push(['SINSTS','Puissance app. Instantan&eacute;e soutir&eacute;e',false,'VA',0]);
L.push(['SINSTS1','Puissance app. Instantan&eacute;e soutir&eacute;e phase 1',true,'VA',0]);
L.push(['SINSTS2','Puissance app. Instantan&eacute;e soutir&eacute;e phase 2',true,'VA',0]);
L.push(['SINSTS3','Puissance app. Instantan&eacute;e soutir&eacute;e phase 3',true,'VA',0]);
L.push(['SMAXSN','Puissance app. max. soutir&eacute;e n',false,'VA',1]);
L.push(['SMAXSN1','Puissance app. max. soutir&eacute;e n phase 1',true,'VA',1]);
L.push(['SMAXSN2','Puissance app. max. soutir&eacute;e n phase 2',true,'VA',1]);
L.push(['SMAXSN3','Puissance app. max. soutir&eacute;e n phase 3',true,'VA',1]);
L.push(['SMAXSN-1','Puissance app. max. soutir&eacute;e n-1',false,'VA',1]);
L.push(['SMAXSN1-1','Puissance app. max. soutir&eacute;e n-1 phase 1',true,'VA',1]);
L.push(['SMAXSN2-1','Puissance app. max. soutir&eacute;e n-1 phase 2',true,'VA',1]);
L.push(['SMAXSN3-1','Puissance app. max. soutir&eacute;e n-1 phase 3',true,'VA',1]);
L.push(['SINSTI','Puissance app. Instantan&eacute;e inject&eacute;e',false,'VA',0]);
L.push(['SMAXIN','Puissance app. max inject&eacute;e n',false,'VA',1]);
L.push(['SMAXIN-1','Puissance app. max inject&eacute;e n-1',false,'VA',1]);
L.push(['LTARF','Option Tarifaire',false,'',2]);

function creerTableauUxIx2(){
var S='<table>';
for (var i=0;i<M.length;i++){
  if (i==0){
    S+='<tr  class="titre"><td class="titre" id="nomSondeMobile">Maison</td><td ></td><td></td></tr>';
  }
  if (i==6){
    S+='<tr  class="titre"><td class="titre" id="nomSondeFixe">Triac</td><td ></td><td></td></tr>';
  }
  S+='<tr  class="'+M[i][3]+'"><td>'+M[i][1]+'</td><td id="'+M[i][0]+'" class="ri"></td><td>'+M[i][2]+'</td></tr>';
}
S+='</table>';
GH('tableau', S);
}
function creerTableauEnphase(){
var S='<table>';
for (var i=0;i<E.length;i++){
  if (i==0){
    S+='<tr  class="titre"><td class="titre" id="nomSondeMobile">Maison</td><td ></td><td></td></tr>';
  }
  S+='<tr  class="'+E[i][3]+'"><td>'+E[i][1]+'</td><td id="'+E[i][0]+'" class="ri"></td><td>'+E[i][2]+'</td></tr>';
}
S+='</table>';
GH('tableauEnphase', S);
}
function creerTableauLinky(){
var S='<table>';
for (var i=0;i<L.length;i++){
  S+='<tr id="L'+L[i][0]+'" style="display:none;" class="'+L[i][3]+'"><td>'+L[i][1]+'</td><td id="'+L[i][0]+'" class="ri"></td><td>'+L[i][3]+'</td><td id="h'+L[i][0]+'" class="ri"></td></tr>';
}
S+='</table>';
GH('tableauLinky', S);
}
function LoadData() {
GID('LED').style='display:block;';
var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() { 
  if (this.readyState == 4 && this.status == 200) {
    GID('LED').style='display:none;';
    var DuRMS=this.responseText;
    var groupes=DuRMS.split(GS)
    var G0=groupes[0].split(RS);
    GH('date',G0[0]);
    Source_data=G0[1];
    if (Source_data == "UxI"){
      GID('infoUxI').style.display="block";
      GH('Ueff',parseInt(G0[2],10));
      GH('Ieff',G0[3]);
      GH('cosphi',G0[4]);
      var volt=groupes[1].split(RS);
      var amp=groupes[2].split(RS);
      var S= "<svg height='400' width='1000' >";
      S += "<line x1='0' y1='400' x2='0' y2='0' style='stroke:rgb(0,0,0);stroke-width:2' />";
      S += "<line x1='0' y1='197' x2='1000' y2='197' style='stroke:rgb(0,0,0);stroke-width:2' />";
      var  Vmax = 500;
      var Imax = 500;
      for (var i = 0; i < 100; i++) {
        Vmax = Math.max(Math.abs(volt[i]), Vmax);
        Imax = Math.max(Math.abs(amp[i]), Imax);
      }

      S += "<polyline points='";
      for (var i = 0; i < 100; i++) {
        var Y = 197 - 185 * volt[i] / Vmax;
        var X = 10 * i;
        S += X + ',' + Y + ' ';
      }
      S += "' style='fill:none;stroke:red;stroke-width:6' />";
      S += "<polyline points='";
      for (var i = 0; i < 100; i++) {
        var Y = 197 - 185 * amp[i] / Imax;
        var X = 10 * i;
        S += X + ',' + Y + ' ';
      }
      S += "' style='fill:none;stroke:lightgreen;stroke-width:6' />";
      S += "</svg>";
      GH('SVG',S);
    }
    if (Source_data == "UxIx2"){
      GID('infoUxIx2').style.display="block";
      var G1=groupes[1].split(RS);
      if(!InitFait){
          InitFait=true;
          creerTableauUxIx2();
          GH("nomSondeFixe",nomSondeFixe);
          GH("nomSondeMobile",nomSondeMobile); 
      }
      for (var j=0;j<M.length;j++){
            if( M[j][3] == 'Wh' ) {
              GH(M[j][0], LaVal(G1[j])); 
            } else {
              GH(M[j][0], G1[j]); 
            }    
      }
    }
    if (Source_data == "Enphase"){
      GID('infoEnphase').style.display="block";
      var G1=groupes[1].split(RS);
      if(!InitFait){
          InitFait=true;
          creerTableauEnphase();
          GH("nomSondeMobile",nomSondeMobile); 
      }
      for (var j=0;j<E.length;j++){
            if( E[j][3] == 'Wh' ) {
              GH(E[j][0], LaVal(G1[j])); 
            } else {
              GH(E[j][0], G1[j]); 
            }    
      }
    }
    if (Source_data == "SmartG"){
      GID('infoSmartG').style.display="block";
      groupes[1] = groupes[1].replaceAll('"','');
      var G1=groupes[1].split(",");
      var S="";              
      for (var i=0;i<G1.length;i++){
            S +=G1[i]+"<br>";
      }
        GH('dataSmartG', S);
    }
    if (Source_data == "ShellyEm"){
      GID('infoShellyEm').style.display="block";
      groupes[1] = groupes[1].replaceAll('"','');
      var G1=groupes[1].split(",");
      var S="";              
      for (var i=0;i<G1.length;i++){
            S +=G1[i]+"<br>";
      }
        GH('dataShellyEm', S);
    }
    if (Source_data == "Linky"){
      GID('infoLinky').style.display="block";
      if(!InitFait){
          InitFait=true;
          creerTableauLinky();
      }
      MessageLinky +=groupes[1];
      var blocs=MessageLinky.split(String.fromCharCode(2));
      var lg=blocs.length;
      if (lg>2){
          MessageLinky=String.fromCharCode(2)+blocs[lg-1];               
          GH('DataLinky', '<pre>'+blocs[lg-2]+'</pre>');
          var lignes=blocs[lg-2].split(String.fromCharCode(10));
          for (var i=0;i<lignes.length;i++){
            var colonnes=lignes[i].split(String.fromCharCode(9));
            if (colonnes[0]=='DATE'){
              GH('dateLinky', LaDate(colonnes[1]));
            }
            for (var j=0;j<L.length;j++){
              if (colonnes[0]==L[j][0]){
                if (!L[j][2] || parseInt(colonnes[1])>0){
                  GID('L'+L[j][0]).style.display="table-row";
                  switch (L[j][4]){
                    case 0:
                      GH(L[j][0], LaVal(colonnes[1]));
                      break;
                    case 1:
                      GH('h'+L[j][0],  LaDate(colonnes[1]));
                      GH(L[j][0], LaVal(colonnes[2]));
                      break;
                    case 2: //Texte
                      GH('h'+L[j][0], colonnes[1]);
                      break;
                  }
                }
              }
            }
          }
          GID('LED').style='display:none;';
      }
      IdxMessage=groupes[2];
    }
    
      setTimeout('LoadData();',2000);
  }  
};
xhttp.open('GET', 'ajax_dataRMS?idx='+IdxMessage, true);
xhttp.send();
}
function LoadDataESP32() {
var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() { 
  if (this.readyState == 4 && this.status == 200) {
      var dataESP=this.responseText;
      var message=dataESP.split(RS);
      var S='<table>';
      var H=parseInt(message[0]);
      H=H + (message[0]-H)*0.6;
      H=H.toFixed(2);
      H=H.replace(".", "h ")+"mn";
      var LaSource=Source;
      if (LaSource=='Ext') LaSource="Externe ("+Source_data+")<br>" +int2ip(RMSextIP);
      S+='<tr><td>ESP On depuis :</td><td>'+H+'</td></tr>';
      S+='<tr><td>Source des mesures :</td><td>'+LaSource+'</td></tr>';
      S+='<tr><td>Niveau WiFi :</td><td>'+message[1]+' dBm</td></tr>';
      S+="<tr><td>Point d'acc&egrave;s WiFi :</td><td>"+message[2]+'</td></tr>';
      S+='<tr><td>Adresse MAC ESP32 :</td><td>'+message[3]+'</td></tr>';
      S+='<tr><td>R&eacute;seau WiFi :</td><td>'+message[4]+'</td></tr>';
      S+='<tr><td>Adresse IP ESP32 :</td><td>'+message[5]+'</td></tr>';
      S+='<tr><td>Adresse passerelle :</td><td>'+message[6]+'</td></tr>';
      S+='<tr><td>Masque du r&eacute;seau :</td><td>'+message[7]+'</td></tr>';
      S+='<tr><td>Charge coeur 0 (Lecture RMS) Min, Moy, Max :</td><td>'+message[8]+' ms</td></tr>';
      S+='<tr><td>Charge coeur 1 (Calcul + Wifi) Min, Moy, Max :</td><td>'+message[9]+' ms</td></tr>';
      S+='<tr><td>Espace mémoire EEPROM utilisé :</td><td>'+message[10]+' %</td></tr>';
      S+="<tr><td>Nombre d'interruptions en 15ms du Gradateur (signal Zc) : Filtrés/Brutes :</td><td>"+message[11]+'</td></tr>';
      S+='<tr><td>Synchronisation 10ms au Secteur ou asynchrone horloge ESP32</td><td>'+message[12]+'</td></tr>';
      S +='<tr><td style="text-align:center;"><strong>Messages</strong></td><td></td></tr>';
      for (var i=0;i<4;i++){
        S +='<tr><td>'+message[13+i]+'</td><td></td></tr>';
      }
      S+='</table>';
      GH('DataESP32', S);             
      setTimeout('LoadDataESP32();',5000);
  }
  
};
xhttp.open('GET', 'ajax_dataESP32', true);
xhttp.send();
}
function LaDate(d){
  return d.substr(0,1)+' '+d.substr(5,2)+'/'+d.substr(3,2)+'/'+d.substr(1,2)+' '+d.substr(7,2)+'h '+d.substr(9,2)+'mn '+d.substr(11,2)+'s';
}
function LaVal(d){
  d=parseInt(d);
  d='           '+d.toString();
  return d.substr(-9,3)+' '+d.substr(-6,3)+' '+d.substr(-3,3);
}
function AdaptationSource(){
if(Source=="Ext"){
  GID("donneeDistante").style.display="block";
}
LoadData();LoadDataESP32();
}


)=====",
    // Generated from connect.html
    R"=====(
<!doctype html>
<html><head><meta charset="UTF-8">
    <script src="/ParaRouteurJS"></script>
    <style>
      body {font-size:150%;text-align:center;width:1000px;margin:auto;background: linear-gradient(#003,#77b5fe,#003);background-attachment:fixed;color:white;padding:4px;}
      #form-passe {display: none;padding:10px;text-align:center;margin:auto;width:100%;}
      label,input,.dB {display: table-cell;padding:2px;text-align:left;font-size:120%;}
      .l0{display:table-row;margin:auto;background-color:#333;padding:2px;}
      .l1{display:table-row;margin:auto;background-color:#666;padding:2px;}
      #ListeWifi{display:inline-block;margin:auto;}
      #envoyer{padding-top:20px;display:none;}
      #attente2{display:none;}
    </style>
</head>
<body>
<h1>Routeur Solaire - RMS</h1><h4>Connexion au r&eacute;seau WIFI local</h4>
<div id="ListeWifi"></div><br><br>
<div id="scanReseau">
    <input type='button' onclick="ScanWIFI();" value='Scan réseaux WIFI' >
</div>
<br>
<div id='form-passe'>
  <div >Entrez le mot de passe du r&eacute;seau : </div>
  <input type='password' name='passe' id='passe' required>
</div>
<div id="envoyer" >
    <input type='button' onclick="Envoyer();" value='Envoyer' >
</div>
<br>
<div id="attente2">Attendez l'adresse IP attribuée à l'ESP 32</div>
<br>
<script>
  function ScanWIFI(){
    GH("ListeWifi", "Patientez 10s");
    var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() { 
          if (this.readyState == 4 && this.status == 200) {
             var LesWifi=this.responseText;
             var Wifi=LesWifi.split(GS); 
             var S="Sélectionnez un réseau Wifi";
             for (var i=0;i<Wifi.length-1;i++) {
                var wifi=Wifi[i].split(RS); 
                var j=i%2;
                S +="<div class='l"+ j +"'>";
                S +="<label for='W" + i+"'>" + wifi[0] +" </label>";
                S +="<div class='dB'>" +wifi[1] +" dBm</div> <input type='radio' name='Wifi' value='" +  wifi[0] +"' onclick='ChoixWifi(this.value);'>";
                S +="</div>";
              }
              
              
             GH("ListeWifi", S);
          }         
        };
        xhttp.open('GET', 'AP_ScanWifi', true);
        xhttp.send();
        GID("form-passe").style.display = "none";
        GID("envoyer").style.display = "none";
        GID("attente2").style.display = "none";
  }
  function Envoyer(){
    var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() { 
          if (this.readyState == 4 && this.status == 200) {
            var Resp=this.responseText;
            var Txt=Resp.split(RS); 
            GH("ListeWifi", Txt[1]);
            GID("attente2").style.display = "none";
            GID("form-passe").style.display = "none";
            GID("envoyer").style.display = "none";
            if (Txt[0] == "Ok") {
              GID("scanReseau").style.display = "none";      
            }
          }         
        };
        var adr ="/AP_SetWifi?ssid="+clean(ssid)+"&passe=" + clean(GID("passe").value);
        xhttp.open('GET', adr, true);
        xhttp.send();
        GID("form-passe").style.display = "none";
        GID("envoyer").style.display = "none";
        GID("attente2").style.display = "block";
  }
  ssid="";
  function ChoixWifi(V){
      ssid = V;
      GID("envoyer").style.display = "inline-block";
      GID("form-passe").style.display = "inline-block";
  }
</script>
</body></html>

)=====",
    // Generated from main.html
    R"=====(
<!doctype html>
  <html><head><meta charset="UTF-8"><style>
    * {box-sizing: border-box;}
    body {background: linear-gradient(#003,#77b5fe,#003);background-attachment:fixed;font-size:150%;text-align:center;width:100%;max-width:1000px;margin:auto;}
    a:link {color:#aaf;text-decoration: none;}
    a:visited {color:#ccf;text-decoration: none;}
    h2{text-align:center;color:white;}
    .ri { text-align: right;}
    .ce { text-align: center;}
    .blue { background-color:#ddf;}
    .Wh { background-color:#ff8;}
    .W { background-color:#f88;}
    .VA { background-color:aqua;}
    .deg { background-color:#fdf;}
    .temper { background-color:#8f8;}
    .foot { color:white;font-size:16px;}
    .pied{display:flex;justify-content:space-between;font-size:14px;color:white;}
    #date { color:white;}
    .tableau { background-color:white;display:inline-block;margin:auto;padding:4px;}
    table {border:10px inset azure;}
    td { text-align: left;padding:4px;}
    th { text-align: center;padding:4px;}
    svg { border:10px inset azure;background: linear-gradient(#333,#666,#333);}
    #LED{position:absolute;top:4px;left:4px;width:0px;height:0px;border:5px solid red;border-radius:5px;}
    .onglets{margin-top:4px;font-size:130%;}
    .Baccueil,.Bbrut,.Bparametres,.Bactions{margin-left:20px;border:outset 4px grey;background-color:#333;border-radius:6px;padding-left:20px;padding-right:20px;display:inline-block;}
    .Baccueil{border:inset 8px azure;}
    .jauge{background-color:#ff8;height:28px;text-align:left;overflow: visible;position:absolute;top:4px;left:4px;}
    .jaugeBack{background-color:aqua;width:208px;height:36px;position:relative;padding:4px;}
    .w100{width:100%;position:absolute;top:4px;left:4px;}
    .centrer{text-align:center;}
    .dispT,#SVG_PW48hT,#SVG_PW2sT,#SVG_Temp48h{display:none;}
    #donneeDistante,#donneeLocale{font-size:50%;color:white;text-align:center;margin-bottom:10px;display:none;}
    #info{position:absolute;background-color:black;padding:2px;border: 3px inset azure;}
    #couleurTarif_jour,#couleurTarif_J1{font-size:8px;}
  </style></head>
  <body onload='LoadParaRouteur();LoadData();LoadHisto10mn();EtatActions();' >
    <div id='LED'></div>
    <div class='onglets'><div class='Baccueil'><a href='/'>Accueil</a></div><div class='Bbrut'><a href='/Brute'>Donn&eacute;es brutes</a></div><div class='Bparametres'><a href='/Para'>Param&egrave;tres</a></div><div class='Bactions'><a href='/Actions'>Actions</a></div></div>
    <h2 id='nom_R'>Routeur Solaire - RMS</h2>
    <div id='date'>DATE</div>
    <div><div class='tableau'><table >
      <tr class='blue'><th></th><th colspan='2' id='nomSondeMobile'>Maison</th><th colspan='2' class='dispT' id='nomSondeFixe'>Fixe</th><th id='couleurTarif_jour'></th></tr>
      <tr class='blue'><th></th><th>Soutirée</th><th>Injectée</th><th class='dispT'>Conso.</th><th class='dispT' id="produite">Produite</th><th id='couleurTarif_J1'></th></tr>
      <tr class='W'><td>Puissance Active <small>(Pw)</small></td><td id='PwS_M' class='ri'></td><td class='ri' id='PwI_M'></td><td class='dispT ri' id='PwS_T'></td><td class='dispT ri' id='PwI_T'></td><td>W</td></tr>
      <tr class='VA'  id='ligneVA'><td>Puissance Apparente</td><td id='PVAS_M' class='ri'></td><td class='ri'  id='PVAI_M'></td><td class='dispT ri' id='PVAS_T'></td><td class='dispT ri'  id='PVAI_T'></td><td>VA</td></tr>
      <tr class='Wh'><td>Energie Active du jour</td><td id='EAJS_M' class='ri'></td><td id='EAJI_M' class='ri'></td><td class='dispT ri' id='EAJS_T'></td><td class='dispT ri' id='EAJI_T'></td><td>Wh</td></tr>
      <tr class='Wh'><td>Energie Active Totale</td><td id='EAS_M' class='ri'></td><td id='EAI_M' class='ri'></td><td class='dispT ri' id='EAS_T'></td><td class='dispT ri' id='EAI_T'></td><td>Wh</td></tr>
    </table></div></div>
    <div id="donneeDistante">Données distantes</div>
    <div id='etatActions'></div>
    <div id="donneeLocale">Données locales</div>
    <p id='SVG_PW2sM'></p>
    <p id='SVG_PW2sT'></p>
    <p id='SVG_PW48hM'></p>
    <p id='SVG_PW48hT'></p>
    <p id='SVG_Temp48h'></p>
    <p id='SVG_Wh1an'></p>
    <div id='info'></div>
    <br><br><div class='foot' >Donn&eacute;es  RMS<div id='source'></div></div>
    <div class='pied'><div>Routeur Version : <span id='version'></span></div><div><a href='https:F1ATB.fr' >F1ATB.fr</a></div></div>
    <script src='MainJS'></script>
    <script src="/ParaRouteurJS"></script>
    <br></body></html>

)=====",
    // Generated from main.js
    R"=====(
var tabPW2sM=[];
var tabPW2sT=[];
var initUxIx2=false;
var biSonde=false;
var TableauX = [];
var TableauY0 = [];
var TableauY1 = [];
var  myTimeout;
function LoadData() {
  GID('LED').style='display:block;';
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() { 
    if (this.readyState == 4 && this.status == 200) {
        var DuRMS=this.responseText;
        var groupes=DuRMS.split(GS);
        var G0=groupes[0].split(RS);
        var G1=groupes[1].split(RS);
        var G2=groupes[2].split(RS);
        GID('date').innerHTML = G0[1];
        Source_data= G0[2];
        if (!initUxIx2){
          initUxIx2=true;
          var d='none';
          if(groupes.length==4){ // Cas pour les sources externes UxIx2 et Shelly monophasé
            d="table-cell";
          }
          const collection = document.getElementsByClassName('dispT');
          for (let i = 0; i < collection.length; i++) {
            collection[i].style.display = d;
          }      
        }           
        GID('PwS_M').innerHTML = LaVal(G1[0]); //Maison
        GID('PwI_M').innerHTML = LaVal(G1[1]); //Maison
        GID('PVAS_M').innerHTML = LaVal(G1[2]); //Maison
        GID('PVAI_M').innerHTML = LaVal(G1[3]); //Maison
        GID('EAJS_M').innerHTML = LaVal(G1[4]);
        GID('EAJI_M').innerHTML = LaVal(G1[5]);
        GID('EAS_M').innerHTML = LaVal(G1[6]); 
        GID('EAI_M').innerHTML = LaVal(G1[7]); 
        tabPW2sM.shift(); //Enleve Pw Maison
        tabPW2sM.shift(); //Enleve PVA
        tabPW2sM.push(parseFloat(G1[0]-G1[1]));
        tabPW2sM.push(parseFloat(G1[2]-G1[3]));
        Plot('SVG_PW2sM',tabPW2sM,'#f44','Puissance Active '+GID("nomSondeMobile").innerHTML+' sur 10 mn en W','aqua','Puissance Apparente sur 10 mn en VA');  

        var Tarif=["NON_DEFINI","PLEINE","CREUSE","BLEU","BLANC","ROUGE"];
        var couleur=["#ddf","#f00","#0f0","#00bfff","#fff","#f00"];
        var tarif=["","H.<br>pleine","H.<br>creuse","Tempo<br>Bleu","Tempo<br>Blanc","Tempo<br>Rouge"];
        var idx=0;
        for (i=0;i<6;i++){
          if ( G0[3].indexOf(Tarif[i])>=0){ //LTARF dans Link
            idx=i;
          }
        }
        GID('couleurTarif_jour').style.backgroundColor= couleur[idx];
        GID('couleurTarif_jour').innerHTML =tarif[idx];
        var tempo = parseInt(G0[4], 16); //Tempo lendemain et jour STGE
        tempo =Math.floor(tempo/4) ; //Tempo lendemain uniquement
        idx=-2;
        var txtJ = "";
        if (tempo>0){
          idx = tempo;
          txtJ = "Tempo<br>J+1";
        }
        GID('couleurTarif_J1').style.backgroundColor= couleur[idx+2];
        GID('couleurTarif_J1').innerHTML =txtJ;
        
      if (groupes.length==4) { // La source_data des données est de type UxIx2 ou on est en shelly monophas avec un deuxièeme canal
        GID('PwS_T').innerHTML = LaVal(G2[0]); //Triac
        GID('PwI_T').innerHTML = LaVal(G2[1]); //Triac
        GID('PVAS_T').innerHTML = LaVal(G2[2]); //Triac
        GID('PVAI_T').innerHTML = LaVal(G2[3]); //Triac
        GID('EAJS_T').innerHTML = LaVal(G2[4]);
        GID('EAJI_T').innerHTML = LaVal(G2[5]);      
        GID('EAS_T').innerHTML = LaVal(G2[6]);
        GID('EAI_T').innerHTML = LaVal(G2[7]); 
        tabPW2sT.shift(); //Enleve Pw Triav
        tabPW2sT.shift(); //Enleve PVA
        tabPW2sT.push(parseFloat(G2[0]-G2[1]));
        tabPW2sT.push(parseFloat(G2[2]-G2[3]));
        Plot('SVG_PW2sT',tabPW2sT,'#f44','Puissance Active '+GID("nomSondeFixe").innerHTML+' sur 10 mn en W','aqua','Puissance Apparente sur 10 mn en VA'); 
        if (parseInt(G2[5])==0 && Source!="ShellyEm")  { //Il n'y a pas d'injecté normalement
          GID('produite').innerHTML='';
          GID('PwI_T').innerHTML='';
          GID('PVAI_T').innerHTML='';
          GID('EAJI_T').innerHTML='';
          GID('EAI_T').innerHTML='';
        }
        biSonde=true;
      } else{
        biSonde=false;
      } 
      if (Source_data=='SmartG') { GID('ligneVA').style='display:none;';}   
      GID('LED').style='display:none;';
      setTimeout('LoadData();',2000);
    }
    
  };
  xhttp.open('GET', 'ajax_data', true);
  xhttp.send();
}

function LoadHisto10mn() {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() { 
    if (this.readyState == 4 && this.status == 200) {
      var retour=this.responseText;
      var groupes=retour.split(GS);
      tabPW2sM.splice(0,tabPW2sM.length);
      tabPW2sM=groupes[1].split(',');
      tabPW2sM.pop();
      Plot('SVG_PW2sM',tabPW2sM,'#f44','Puissance Active '+GID("nomSondeMobile").innerHTML+' sur 10 mn en W','aqua','Puissance Apparente sur 10 mn en VA');
      if (biSonde){
        tabPW2sT.splice(0,tabPW2sT.length);
        tabPW2sT=groupes[2].split(',');
        tabPW2sT.pop();
        GID('SVG_PW2sT').style.display="block";
        Plot('SVG_PW2sT',tabPW2sT,'#f44','Puissance Active '+GID("nomSondeFixe").innerHTML+' sur 10 mn en W','aqua','Puissance Apparente sur 10 mn en VA');
      }
      LoadHisto1an();
    }
    
  };
  xhttp.open('GET', 'ajax_data10mn', true);
  xhttp.send();
}
function LoadHisto48h() {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() { 
    if (this.readyState == 4 && this.status == 200) {
      var retour=this.responseText;
      var groupes=retour.split(GS);
      var tabPWM=groupes[1].split(',');
      tabPWM.pop();
      Plot('SVG_PW48hM',tabPWM,'#f33','Puissance Active '+GID("nomSondeMobile").innerHTML+' sur 48h en W','','');
      if (biSonde){
        var tabPWT=groupes[2].split(',');
        tabPWT.pop();
        GID('SVG_PW48hT').style.display="block";
        Plot('SVG_PW48hT',tabPWT,'#f33','Puissance Active '+GID("nomSondeFixe").innerHTML+' sur 48h en W','',''); 
      }
      if (parseFloat(groupes[3])> -100) {
          var tabTemperature=groupes[4].split(',');
        tabTemperature.pop();
        GID('SVG_Temp48h').style.display="block";
        Plot('SVG_Temp48h',tabTemperature,'#3f3',nomTemperature+' sur 48h ','',''); 
      }
      setTimeout('LoadHisto48h();',300000);
    }
    
  };
  xhttp.open('GET', 'ajax_histo48h', true);
  xhttp.send();
}
function LoadHisto1an() {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() { 
    if (this.readyState == 4 && this.status == 200) {
      var retour=this.responseText;
      var tabWh=retour.split(',');
      tabWh.pop();
      
      Plot('SVG_Wh1an',tabWh,'#ff4','Energie Active Wh / Jour sur 1an','','');
      LoadHisto48h();
    }
    
  };
  xhttp.open('GET', 'ajax_histo1an', true);
  xhttp.send();
}
function Plot(SVG,Tab,couleur1,titre1,couleur2,titre2){
    var Vmax=0;
    var Vmin=0;
    var TabX=[];
    var TabY0=[];
    var TabY1=[];
    for (var i = 0; i < Tab.length; i++) {
          Vmax = Math.max(Math.abs(Tab[i]), Vmax);       
    }    
    var cadrageMax=1;
    var cadrage1=1000000;
    var cadrage2=[10,8,5,4,2,1];
    for (var m=0;m<7;m++){
      for (var i=0;i<cadrage2.length;i++){
          var X=cadrage1*cadrage2[i];
          if ((Vmax)<=X) cadrageMax=X;
      }
      cadrage1=cadrage1/10;
    }
    
    var dX=900/Tab.length;
    const d = new Date();
    var dI=1;
    var label='heure';
    var pixelTic=72;
    var dTextTic=4;
    var moduloText=24;
    var H0=d.getHours()+d.getMinutes()/60;
    var H00= 4*Math.floor(H0/4);
    var X0=18*(H00-H0);
    var Y0=250;
    var Yamp=230;
    var dy=2;
    switch (SVG){
      case  'SVG_PW48hM':
        
      break;
      case  'SVG_PW48hT':
        
      break;
      case 'SVG_Temp48h':
        Y0=450;
        Yamp=430;
        dy=1;
      break;
      case  'SVG_PW2sM':
        label='mn';
        pixelTic=90;
        X0=0;
        dTextTic=1;
        moduloText=-100;
        H00= 0;
        dI=2; //2 courbes PW et PVA
      break;
      case  'SVG_PW2sT':
        label='mn';
        pixelTic=90;
        X0=0;
        dTextTic=1;
        moduloText=-100;
        H00= 0;
        dI=2; //2 courbes PW et PVA
      break;
      case  'SVG_Wh1an':
        label='Mois';
        pixelTic=dX*30.4375;//Mois moyen
        var dTextTic=1;
        moduloText=12;
        H00= d.getMonth();
        X0=dX*(1-d.getDate());
        var Mois=['Jan','Fev','Mars','Avril','Mai','Juin','Juil','Ao&ucirc;t','Sept','Oct','Nov','Dec'];
      break;
      
    }
    var c1='"' + couleur1 + '"';
    var c2='"' + couleur2 + '"';
    var S= "<svg viewbox='0 0 1030 500' height='500' width='100%' id='S_" + SVG +"' onmouseover ='DispVal(this,event," +c1+","+c2+");' >";
    S += "<line x1='100' y1='20' x2='100' y2='480' style='stroke:white;stroke-width:2' />";
    S += "<line x1='100' y1='" + Y0 + "' x2='1000' y2='" + Y0 + "' style='stroke:white;stroke-width:2' />";
    
    for (var x=1000+X0;x>100;x=x-pixelTic){
      var X=x;
      var Y2=Y0+6;
      S +="<line x1='"+X+"' y1='" + Y0 + "' x2='"+X+"' y2='" + Y2 + "' style='stroke:white;stroke-width:2' />";
      X=X-8;
      Y2=Y0+22;
      if (SVG=='SVG_Wh1an') {
        X=X+8;
        S +="<text x='"+X+"' y='" + Y2 + "' style='font-size:16px;fill:white;'>"+Mois[H00]+"</text>";
      }else{
        S +="<text x='"+X+"' y='" + Y2 + "' style='font-size:16px;fill:white;'>"+H00+"</text>";
      }
      H00=(H00-dTextTic+moduloText)%moduloText;
    }
    Y2=Y0-3;
    S +="<text x='980' y='" + Y2 + "' style='font-size:14px;fill:white;'>"+label+"</text>";
    for (var y=-10 ;y<=10;y=y+dy){
      
      Y2=Y0-Yamp*y/10;
      if (Y2<=480){
        S +="<line x1='100' y1='"+Y2+"' x2='1000' y2='"+Y2+"' style='stroke:white;stroke-width:1;stroke-dasharray:2 10;' />";
        Y2=Y2+7;
        var T=cadrageMax*y/10;T=T.toString();
        var X=90-9*T.length;
        S +="<text x='"+X+"' y='"+Y2+"' style='font-size:16px;fill:white;'>"+T+"</text>";
      }
    }
    if (dI==2 && Source_data!='SmartG'){ //Pas de puissance apparente pour SmartG
      S +="<text x='450' y='40' style='font-size:18px;fill:"+couleur2+";'>"+titre2+"</text>";
      S += "<polyline points='"; 
        var j=0;       
        for (var i = 1; i < Tab.length; i = i+dI) {
          var Y = Y0 - Yamp * Tab[i] / cadrageMax;
          var X = 100+dX * i;
          S += X + "," + Y + " ";
          TabX[j]=X;
          TabY1[j]=parseFloat(Tab[i]);
          j++;
        }
      S += "' style='fill:none;stroke:"+couleur2+";stroke-width:4' />";
    }
    S +="<text x='450' y='18' style='font-size:18px;fill:"+couleur1+";'>"+titre1+"</text>";
    S += "<polyline points='";   
      var j=0;     
      for (var i = 0; i < Tab.length; i = i+dI) {
        var Y = Y0 - Yamp * Tab[i] / cadrageMax;
        var X = 100+dX * i;
        S += X + "," + Y + " ";
        TabX[j]=X;
        TabY0[j]=parseFloat(Tab[i]);
        j++;
      }
    S += "' style='fill:none;stroke:"+couleur1+";stroke-width:4' />";
    
    S += "</svg>";
    GID(SVG).innerHTML = S;
    TableauX["S_" + SVG] = TabX; //Sauvegarde valeurs
    TableauY0["S_" + SVG] = TabY0; //Sauvegarde valeurs
    TableauY1["S_" + SVG] = TabY1; //Sauvegarde valeurs
}
function DispVal(t,evt,couleur1,couleur2){
  var ClientRect =  t.getBoundingClientRect();
  var largeur_svg=ClientRect.right-ClientRect.left-20; //20 pixels de marge
  var x= Math.round(evt.clientX - ClientRect.left-10);
  x=x*1030/largeur_svg;
  if(x>=0 && x<=1000){
    var p=-1;
    var distM=10000;
    for (var i=0;i<TableauX[t.id].length;i++){ //Recherche position dans tableau valeurs
      var Dist=Math.abs(TableauX[t.id][i]-x);
      if (Dist<=distM) {
        p=i;
        distM=Dist;
      }
      if (Dist==0) i=10000;
    }
    if (p>=0){
      var S="<div style='color:"+couleur1 + ";'>" + TableauY0[t.id][p] + "</div>";
      if (TableauY1[t.id].length>0) S ="<div style='color:"+couleur2 + ";'>"+ TableauY1[t.id][p]+ "</div>" + S;
      x = evt.pageX+10;
      GID("info").style.left=x + "px";
      x = evt.pageY+10;
      GID("info").style.top=x +"px";
      GH("info",S);
      GID("info").style.display="block";
      if (myTimeout !=null) clearTimeout(myTimeout);
      myTimeout=setTimeout(stopAffiche, 5000);
    }
  }
}
function stopAffiche(){
  GID("info").style.display="none";
}
function EtatActions() {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() { 
    if (this.readyState == 4 && this.status == 200) {
      var retour=this.responseText;
      var message=retour.split(GS);
      
      Source_data=message[1];
      var T="";
      if(message[0]>-100){
            var Temper=parseFloat(message[0]).toFixed(1);
            T="<tr class='temper'><td>" + nomTemperature +"</td><td class='centrer'>"+Temper+"°C</td></tr>";
      }
      var S="";
      if (message[3]>0){ //Nb Actions            
        for (var i=0;i<message[3];i++){ 
          var data=message[i+4].split(RS);
          S+="<tr><td>"+data[1]+"</td>";
          if (data[2]=="On" || data[2]=="Off"){
            S+="<td><div ><div class='centrer'>"+data[2]+"</div></td></tr>";
          } else {
            var W=1+1.99*data[2];
            S+="<td><div class='jaugeBack'><div class='jauge' style='width:"+W+"px'></div><div class='centrer w100'>"+data[2]+"%</div></div></td></tr>";
          }
        }
      }
      S=S+T;
      if (S!=""){
        S="<div><div class='tableau'><table >" +S;
        S +="</table>";
        GH("etatActions",S);
        if(Source=="Ext" ){
            GID("donneeLocale").style.display="block";   
        }
      }
      setTimeout('EtatActions();',3500);
    }
    
  };
  xhttp.open('GET', 'ajax_etatActions', true);
  xhttp.send();
}

function LaVal(d){
    d=parseInt(d);
    d='           '+d.toString();
    return d.substr(-9,3)+' '+d.substr(-6,3)+' '+d.substr(-3,3);
}

function AdaptationSource(){
  var d='none';
  if(biSonde){
    d="table-cell";
  }
  const collection = document.getElementsByClassName('dispT');
  for (let i = 0; i < collection.length; i++) {
    collection[i].style.display = d;
  } 
  
  var S='Source : ' 
  if(Source=="Ext"){  
    S +='ESP distant '+int2ip(RMSextIP);
    GID("donneeDistante").style.display="block";
  }else {
    S +='ESP local';
  }
  GH('source',S);
}

)=====",
    // Generated from para.js
    R"=====(
var LaTemperature = -100;
function Init(){
  LoadParametres();
  LoadParaRouteur();
}
function LoadParametres() {
  var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() { 
        if (this.readyState == 4 && this.status == 200) {
            var LesParas=this.responseText;
            var Para=LesParas.split(RS);  
            GID("dhcp").checked = Para[0]==1  ? true:false;
            GID("adrIP").value=int2ip(Para[1]);
            GID("gateway").value=int2ip(Para[2]);
            GID("masque").value=int2ip(Para[3]);
            GID("dns").value=int2ip(Para[4]);
            GID(Para[5]).checked = true;
            GID("RMSextIP").value=int2ip(Para[6]);
            GID("EnphaseUser").value=Para[7];
            GID("EnphasePwd").value=Para[8];
            GID("EnphaseSerial").value=Para[9];
            GID("MQTTRepete").value = Para[10];
            GID("MQTTIP").value=int2ip(Para[11]);
            GID("MQTTPort").value=Para[12];
            GID("MQTTUser").value=Para[13];
            GID("MQTTpwd").value=Para[14];
            GID("MQTTPrefix").value=Para[15];
            GID("MQTTdeviceName").value=Para[16];
            GID("nomRouteur").value=Para[17];
            GID("nomSondeFixe").value=Para[18];
            GID("nomSondeMobile").value=Para[19];
            LaTemperature=parseInt(Para[20]);
            GID("nomTemperature").value=Para[21];
            GID("CalibU").value=Para[22];
            GID("CalibI").value=Para[23];
            GID("TempoEDFon").checked = Para[24]==1  ? true:false;
            
            checkDisabled();
        }         
      };
      xhttp.open('GET', 'ParaAjax', true);
      xhttp.send();
    }
function SendValues(){
  var dhcp=GID("dhcp").checked ? 1:0;
  var TempoEDFon=GID("TempoEDFon").checked ? 1:0;
  var Source_new=document.querySelector('input[name="sources"]:checked').value;
  var S=dhcp+RS+ ip2int(GID("adrIP").value)+RS+ ip2int(GID("gateway").value);
  S +=RS+ip2int(GID("masque").value)+RS+ ip2int(GID("dns").value)
  S +=RS+Source_new+RS+ ip2int(GID("RMSextIP").value)+ RS+GID("EnphaseUser").value.trim()+RS+GID("EnphasePwd").value.trim()+RS+GID("EnphaseSerial").value.trim();
  S +=RS+GID("MQTTRepete").value +RS+ip2int(GID("MQTTIP").value) +RS+GID("MQTTPort").value +RS+GID("MQTTUser").value.trim()+RS+GID("MQTTpwd").value.trim();
  S +=RS+GID("MQTTPrefix").value.trim()+RS+GID("MQTTdeviceName").value.trim()+RS+GID("nomRouteur").value.trim()+RS+GID("nomSondeFixe").value.trim()+RS+GID("nomSondeMobile").value.trim();
  S +=RS+GID("nomTemperature").value.trim();
  S +=RS+GID("CalibU").value+RS+GID("CalibI").value + RS + TempoEDFon;
  S="?lesparas="+clean(S);
  if ((GID("dhcp").checked ||  checkIP("adrIP")&&checkIP("gateway"))   && (!GID("MQTTRepete").checked ||  checkIP("MQTTIP"))){
    var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() { 
        if (this.readyState == 4 && this.status == 200) {
          var retour=this.responseText;
          location.reload();
        }         
      };
      xhttp.open('GET', 'ParaUpdate'+S, true);
      xhttp.send();
  }
}
function checkDisabled(){ 
  GID("adrIP").disabled=GID("dhcp").checked;
  GID("gateway").disabled=GID("dhcp").checked;
  GID("masque").disabled=GID("dhcp").checked;
  GID("dns").disabled=GID("dhcp").checked;
  GID("RMSextIP").disabled=!GID("Ext").checked&&!GID("Enphase").checked&&!GID("SmartG").checked&&!GID("ShellyEm").checked;
  GID("MQTTIP").disabled=GID("MQTTRepete").value ==0?true:false;
  GID("MQTTPort").disabled=GID("MQTTRepete").value ==0?true:false;
  GID("MQTTUser").disabled=GID("MQTTRepete").value ==0?true:false;
  GID("MQTTpwd").disabled=GID("MQTTRepete").value ==0?true:false; 
  GID("MQTTPrefix").disabled=GID("MQTTRepete").value ==0?true:false; 
  GID("MQTTdeviceName").disabled=GID("MQTTRepete").value ==0?true:false; 
  GID('ligneTemperature').style.display = (LaTemperature>-100) ? "table-row" : "none";
  Source = document.querySelector('input[name="sources"]:checked').value;
  if (Source !='Ext') Source_data=Source;
  AdaptationSource();
}
function checkIP(id){
  var S=GID(id).value;
  var Table=S.split(".");
  var valide=true;
  if (Table.length!=4) {
    valide=false;
  }else{
    for (var i=0;i<Table.length;i++){
      if (Table[i]>255 || Table[i]<0) valide=false;
    }
  }
  if (valide){
    GID(id).style.color="black";
  } else {
    GID(id).style.color="red";
  }
  return valide;
}


function Reset(){
    var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() { 
        if (this.readyState == 4 && this.status == 200) {
          GID('BoutonsBas').innerHTML=this.responseText;
          setTimeout(location.reload(),3000);
        }         
      };
      xhttp.open('GET', 'restart', true);
      xhttp.send();
}
function AdaptationSource(){
    GID('ligneFixe').style.display = (Source_data=='UxIx2' || (Source_data=='ShellyEm' && GID("EnphaseSerial").value <3))? "table-row" : "none";
    if (Source_data=='UxI' && Source=='UxI' ) {
      GID('Tui').style.display="table-row";
      GID('CUi').style.display="table-row";
      GID('CuI').style.display="table-row";
    } else {
      GID('Tui').style.display="none";
      GID('CUi').style.display="none";
      GID('CuI').style.display="none";
    }
    var txtExt = "ESP-RMS";
    if (Source=='Enphase') txtExt = "Enphase-Envoy";
    if (Source=='SmartG') txtExt = "SmartGateways";
    var lab_enphaseShelly= "Numéro série passerelle IQ Enphase : <span class='fsize10'><br>Pour firmvare Envoy-S V7 seulement</span>";
    if (Source=='ShellyEm') {
      txtExt = "Shelly Em ";
      lab_enphaseShelly="Monophasé : Numéro de voie (0 ou 1) mesurant l'entrée du courant maison<br>Triphasé : mettre 3";
    }
    GID('labExtIp').innerHTML = txtExt;
    GID('label_enphase_shelly').innerHTML = lab_enphaseShelly;
    GID('ligneExt').style.display = (Source=='Ext' || Source=='Enphase' || Source=='SmartG' || Source=='ShellyEm') ? "table-row" : "none";
    GID('ligneEnphaseUser').style.display = (Source=='Enphase') ? "table-row" : "none";
    GID('ligneEnphasePwd').style.display = (Source=='Enphase') ? "table-row" : "none";
    GID('ligneEnphaseSerial').style.display = (Source=='Enphase' || Source=='ShellyEm') ? "table-row" : "none"; //Numéro de serie ou voie
}

)=====",
    // Generated from para.html
    R"=====(
<!doctype html>
  <html><head><meta charset="UTF-8"><style>
    * {box-sizing: border-box;}
    body {font-size:150%;text-align:center;width:100%;max-width:1000px;margin:auto;background: linear-gradient(#003,#77b5fe,#003);background-attachment:fixed;color:white;}
    h2{text-align:center;color:white;}
    a:link {color:#aaf;text-decoration: none;}
    a:visited {color:#ccf;text-decoration: none;}
    .form {margin:auto;padding:10px;display: table;text-align:left;width:100%;}
    .ligne {display: table-row;padding:10px;}
    label,input{display: table-cell;margin: 5px;text-align:left;font-size:20px;height:25px;}
    .boldT{text-align:left;font-weight:bold;display: table-row;}
    .onglets{margin-top:4px;left:0px;font-size:130%;}
    .Baccueil,.Bbrut,.Bparametres,.Bactions{margin-left:20px;border:outset 4px grey;background-color:#333;border-radius:6px;padding-left:20px;padding-right:20px;display:inline-block;}
    .Bparametres{border:inset 10px azure;}
    #BoutonsBas{display:flex;justify-content:space-between;margin-top:20px;}
    .pied{display:flex;justify-content:space-between;font-size:14px;color:white;}
    #ligneFixe,#ligneTemperature,#Tui,#CUi,#CuI,#ligneExt,#ligneEnphaseUser,#ligneEnphasePwd,#ligneEnphaseSerial{display:none;}
    .fsize10{font-size:10px;height:14px;}
  </style>
  <script src="/ParaJS"></script>
  <script src="/ParaRouteurJS"></script>
  </head>
  <body onLoad="Init();">
    <div class='onglets'><div class='Baccueil'><a href='/'>Accueil</a></div><div class='Bbrut'><a href='/Brute'>Donn&eacute;es brutes</a></div><div class='Bparametres'><a href='/Para'>Param&egrave;tres</a></div><div class='Bactions'><a href='/Actions'>Actions</a></div></div>
    <h2 id='nom_R'>Routeur Solaire - RMS</h2><h4>Param&egrave;tres</h4>
    <div class="boldT"><br>Source des mesures</div>
    <div class="form"  >
      <div class="ligne">
        <label for='UxI' style='text-align:right;'>UxI</label>
        <input type='radio' name='sources' id='UxI' value="UxI"  onclick="checkDisabled();">
        <label for='UxIx2' style='text-align:right;'>UxIx2</label>
        <input type='radio' name='sources' id='UxIx2' value="UxIx2"  onclick="checkDisabled();">       
        <label for='Linky' style='text-align:right;'>Linky</label>
        <input type='radio' name='sources' id='Linky' value="Linky"  onclick="checkDisabled();">
        <label for='Enphase' style='text-align:right;'>Enphase-Envoy</label>
        <input type='radio' name='sources' id='Enphase' value="Enphase"  onclick="checkDisabled();">
        <label for='SmartG' style='text-align:right;'>SmartGateways (en test)</label>
        <input type='radio' name='sources' id='SmartG' value="SmartG"  onclick="checkDisabled();">
        <label for='ShellyEm' style='text-align:right;'>Shelly Em</label>
        <input type='radio' name='sources' id='ShellyEm' value="ShellyEm"  onclick="checkDisabled();">
        <label for='Ext' style='text-align:right;'>ESP Externe</label>
        <input type='radio' name='sources' id='Ext' value="Ext"  onclick="checkDisabled();">
      </div>
      <div><span class='fsize10'>N&eacute;cessite un Reset de l'ESP32</span></div>
    </div>
    <div class="form"  >
      <div class='ligne' id="ligneExt">
        <label for='RMSextIP'>Adresse IP <span id='labExtIp'></span> externe (ex : 192.168.1.248) : </label>
        <input type='text' name='RMSextIP' id='RMSextIP' >
      </div>
      <div class='ligne' id="ligneEnphaseUser">
        <label for='EnphaseUser'>Enphase Envoye-S metered User : <span class='fsize10'><br>Pour firmvare Envoy-S V7 seulement</span></label>
        <input type='text' name='EnphaseUser' id='EnphaseUser' >
      </div>
      <div class='ligne' id="ligneEnphasePwd">
        <label for='EnphasePwd'>Enphase Envoye-S metered Password : <span class='fsize10'><br>Pour firmvare Envoy-S V7 seulement</span></label>
        <input type='password' name='EnphasePwd' id='EnphasePwd' >
      </div>
      <div class='ligne' id="ligneEnphaseSerial">
        <label for='EnphaseSerial' id="label_enphase_shelly"></label>
        <input type='text' name='EnphaseSerial' id='EnphaseSerial' onchange='checkDisabled();'>
      </div>
      <br>
      <div class='ligne boldT'>
        <label for='nomRouteur' >Nom du routeur : </label>
        <input type='text' name='nomRouteur' id='nomRouteur' >
      </div>
      <div class='ligne boldT' id='ligneMobile'>
        <label for='nomSondeMobile' >Nom Données courant Maison : </label>
        <input type='text' name='nomSondeMobile' id='nomSondeMobile' >
      </div>
      <div class='ligne boldT' id='ligneFixe'>
        <label for='nomSondeFixe' >Nom Données courant seconde sonde : </label>
        <input type='text' name='nomSondeFixe' id='nomSondeFixe' >
      </div>
      <div class='ligne boldT' id='ligneTemperature'>
        <label for='nomTemperature' >Nom Température : </label>
        <input type='text' name='nomTemperature' id='nomTemperature' >
      </div>
      <div class='ligne boldT'>
        <label for='TempoEDFon'>Couleur Tempo EDF : </label>
        <input type='checkbox' name='TempoEDFon' id='TempoEDFon' style='width:25px;' >
      </div>
      <br>
      <div class="boldT">Adresse IP de l'ESP</div>
      <div class='ligne'>
        <label for='dhcp'>Adresse IP auto (DHCP) : </label>
        <input type='checkbox' name='dhcp' id='dhcp' style='width:25px;' onclick="checkDisabled();">
      </div>
      <div class='ligne'>
        <label for='adrIP'>Adresse IP si fixe (ex : 192.168.1.245) : <br><span class='fsize10'>N&eacute;cessite un Reset de l'ESP32</span></label>
        <input type='text' name='adrIP' id='adrIP' >
      </div>
      <div class='ligne'>
        <label for='gateway'>Passerelle / Gateway (ex : 192.168.1.254) :  <br><span class='fsize10'>En g&eacute;n&eacute;ral l'adresse de votre box internet</span></label>
        <input type='text' name='gateway' id='gateway' >
      </div>
      <div class='ligne'>
        <label for='masque'>Masque / Subnet (ex : 255.255.255.0) :  </label>
        <input type='text' name='masque' id='masque' >
      </div>
      <div class='ligne'>
        <label for='dns'>DNS (ex : 192.168.1.254) :  <br><span class='fsize10'>En g&eacute;n&eacute;ral l'adresse de votre box internet</span></label>
        <input type='text' name='dns' id='dns' >
      </div>
      
      <div class="boldT"><br>Envoi Puissance au serveur MQTT <small>(Home Assistant , Domoticz ...)</small></div>
      <div class='ligne'>
        <label for='MQTTRepete'>P&eacute;riode (s) r&eacute;petition  (0= pas d'envoi) : </label>
        <input type='number' name='MQTTRepete' id='MQTTRepete'  onclick="checkDisabled();" >
      </div>
      <div class='ligne'>
        <label for='MQTTIP'>Adresse IP host MQTT (ex : 192.168.1.18) : </label>
        <input type='text' name='MQTTIP' id='MQTTIP' >
      </div>
      <div class='ligne'>
        <label for='MQTTPort'> port (ex : 1883) : </label>
        <input type='number' name='MQTTPort' id='MQTTPort' >
      </div>
      <div class='ligne'>
        <label for='MQTTUser'>MQTT User nom : </label>
        <input type='text' name='MQTTUser' id='MQTTUser' >
      </div>
      <div class='ligne'>
        <label for='MQTTpwd'>MQTT mot de passe : </label>
        <input type='password' name='MQTTpwd' id='MQTTpwd' >
      </div>
      <div class='ligne'>
        <label for='MQTTPrefix'>MQTT Prefix (1 seul mot ex : homeassistant ) : </label>
        <input type='text' name='MQTTPrefix' id='MQTTPrefix' >
      </div>
      <div class='ligne'>
        <label for='MQTTdeviceName'>MQTT Device Name (1 seul mot ex : routeur_rms ) : </label>
        <input type='text' name='MQTTdeviceName' id='MQTTdeviceName' >
      </div>
      
      <div class="boldT" id='Tui'><br>Calibration Mesures Ueff et Ieff</div>
      <div class='ligne' id='CUi'>
        <label for='CalibU'>Coefficient multiplicateur Ueff (typique : 1000) : </label>
        <input type='number' name='CalibU' id='CalibU'   >
      </div>
      <div class='ligne' id='CuI'>
        <label for='CalibI'>Coefficient multiplicateur Ieff (typique : 1000) : </label>
        <input type='number' name='CalibI' id='CalibI'   >
      </div>
    </div>
    <div  id='BoutonsBas'>
        <input type='button' onclick='Reset();' value='ESP32 Reset' >
        <input type='button' onclick="SendValues();" value='Sauvegarder' >
    </div>
    <br>
    <div class='pied'><div>Routeur Version : <span id='version'></span></div><div><a href='https:F1ATB.fr' >F1ATB.fr</a></div></div>
    <br>
  </body></html>

)=====",
    // Generated from global_para.js
    R"=====(
var Source="";
var Source_data="";
var RMSextIP="";
var GS=String.fromCharCode(29); //Group Separator
var RS=String.fromCharCode(30); //Record Separator
var nomSondeFixe="Sonde Fixe";
var nomSondeMobile="Sonde Mobile";
var nomTemperature="Temperature"; 
function LoadParaRouteur() {
  var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() { 
        if (this.readyState == 4 && this.status == 200) {
            var LesParas=this.responseText;
            var Para=LesParas.split(RS);
            Source=Para[0];
            Source_data=Para[1];
            RMSextIP= Para[6]; 
            AdaptationSource();  
            GH("nom_R",Para[2]);
            GH("version",Para[3]);
            GH("nomSondeFixe",Para[4]);
            GH("nomSondeMobile",Para[5]); 
            nomSondeFixe=Para[4];
            nomSondeMobile=Para[5];
            nomTemperature=Para[7]; 
              
        }         
      };
      xhttp.open('GET', 'ParaRouteurAjax', true);
      xhttp.send();
}
function GID(id) { return document.getElementById(id); };
function GH(id, T) {
  if ( GID(id)){
    GID(id).innerHTML = T; }
  }
function GV(id, T) { GID(id).value = T; }
function clean(S){ //Remplace & et ? pour les envois au serveur
  let res=S.replace(/\%/g,"%25");
  res = res.replace(/\&/g, "%26");
  res = res.replace(/\#/g, "%23");
  res = res.replace(/\+/g, "%2B");
  res=res.replace(/amp;/g,"");
  return res.replace(/\?/g,"%3F");
}
function int2ip (V) {
  var ipInt=parseInt(V);
  return ( (ipInt>>>24) +'.' + (ipInt>>16 & 255) +'.' + (ipInt>>8 & 255) +'.' + (ipInt & 255) );
}
function ip2int(ip) {
  ip=ip.trim();
  return ip.split('.').reduce(function(ipInt, octet) { return (ipInt<<8) + parseInt(octet, 10)}, 0) >>> 0;
}
)=====",
    "" // dummy content to avoid trailing comma
};

